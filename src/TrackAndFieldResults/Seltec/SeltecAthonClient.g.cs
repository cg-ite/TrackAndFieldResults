//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace TrackAndFieldResults.Seltec
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeltecAthonClientGenerated
    {
#pragma warning disable 8618
        private string _baseUrl;
#pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SeltecAthonClientGenerated(System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://ergebnisse.leichtathletik.de";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Convert LAP competition to Athon
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AthonContainer> GetLegacyCompetitionByIdAsync(string id)
        {
            return GetLegacyCompetitionByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Convert LAP competition to Athon
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AthonContainer> GetLegacyCompetitionByIdAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/results/v1/legacy/{id}"
                    urlBuilder_.Append("api/results/v1/legacy/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AthonContainer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate AthON competition structure from LAP competition
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AthonContainer> GetLegacyCompetitionStructureByIdAsync(string id)
        {
            return GetLegacyCompetitionStructureByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate AthON competition structure from LAP competition
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AthonContainer> GetLegacyCompetitionStructureByIdAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/results/v1/legacy/structure/{id}"
                    urlBuilder_.Append("api/results/v1/legacy/structure/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AthonContainer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List of german competitions for one year
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetCompetitionsIndexListAsync(int year, bool? searchTAF, bool? searchEXR)
        {
            return GetCompetitionsIndexListAsync(year, searchTAF, searchEXR, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List of german competitions for one year
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetCompetitionsIndexListAsync(int year, bool? searchTAF, bool? searchEXR, System.Threading.CancellationToken cancellationToken)
        {
            if (year == null)
                throw new System.ArgumentNullException("year");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/results/v1/germany/indexlist"
                    urlBuilder_.Append("api/results/v1/germany/indexlist");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("year")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (searchTAF != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchTAF")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchTAF, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchEXR != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchEXR")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchEXR, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await ReadAsStreamAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Finds a Competition by Seltec Athon ID and returns Athon with DLV Codes
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AthonContainer> GetGermanCompetitionByIdAsync(int id)
        {
            return GetGermanCompetitionByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Finds a Competition by Seltec Athon ID and returns Athon with DLV Codes
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AthonContainer> GetGermanCompetitionByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/results/v1/germany/{id}"
                    urlBuilder_.Append("api/results/v1/germany/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AthonContainer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Finds a Competition by DLV ID and returns Athon with DLV Codes
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AthonContainer> GetGermanCompetitionByDlvIdAsync(string dlvid)
        {
            return GetGermanCompetitionByDlvIdAsync(dlvid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Finds a Competition by DLV ID and returns Athon with DLV Codes
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AthonContainer> GetGermanCompetitionByDlvIdAsync(string dlvid, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/results/v1/germany/dlvid/{dlvid}"
                    urlBuilder_.Append("api/results/v1/germany/dlvid/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(dlvid, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AthonContainer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Load AthON competition by ID
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AthonContainer> GetCompetitionByIdAsync(int id)
        {
            return GetCompetitionByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Load AthON competition by ID
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AthonContainer> GetCompetitionByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/results/v1/{id}"
                    urlBuilder_.Append("api/results/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AthonContainer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
#if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
#else
            return content.ReadAsStringAsync();
#endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
#if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
#else
            return content.ReadAsStreamAsync();
#endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonContainer
    {

        /// <summary>
        /// Name of Creating-Application
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Creator_Name")]
        public string Creator_Name { get; set; }

        /// <summary>
        /// Version of Creating-Application im SemVer Format (x.y.z)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Creator_Version")]
        public string Creator_Version { get; set; }

        /// <summary>
        /// Date and Time in UTC Zulu when this File/Export was generated
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Creation_DateTime")]
        public System.DateTimeOffset? Creation_DateTime { get; set; }

        /// <summary>
        /// One or Many requested competitions
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Competitions")]
        public System.Collections.Generic.ICollection<AthonCompetition> Competitions { get; set; }

        /// <summary>
        /// One or Many requested competitors
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Competitors")]
        public System.Collections.Generic.ICollection<AthonCompetitor> Competitors { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonContainer FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonContainer>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonCompetition
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// First day of competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Start")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset Start { get; set; }

        /// <summary>
        /// Last day of competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("End")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset End { get; set; }

        /// <summary>
        /// Name of town where competition takes place
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Town")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 2)]
        public string Town { get; set; }

        /// <summary>
        /// 3 Letter IOC/ISO Code for Nation. E.g. GER
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Nation")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string Nation { get; set; }

        /// <summary>
        /// Type of Environment where most of the competition takes place
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Environment")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonEnvironment Environment { get; set; }

        /// <summary>
        /// The venue where the competition takes place
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Venue")]
        public AthonVenue Venue { get; set; }

        /// <summary>
        /// Main contact of this competition (e.g. Organizer)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("MainContact")]
        public AthonPerson MainContact { get; set; }

        /// <summary>
        /// German Competition Identifier, should be unique inside germany
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_GER_Id")]
        public string _GER_Id { get; set; }

        /// <summary>
        /// Dutch Competition Identifier, should be unique inside netherlands
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_NED_Id")]
        public string _NED_Id { get; set; }

        /// <summary>
        /// Seltec Object Identifier, globally unique
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_Seltec_Guid")]
        public System.Guid? _Seltec_Guid { get; set; }

        /// <summary>
        /// Report of competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Report")]
        public AthonReport Report { get; set; }

        /// <summary>
        /// Startdate for taking entries
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Entry_Start")]
        public System.DateTimeOffset? Entry_Start { get; set; }

        /// <summary>
        /// Deadline for taking entries
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Entry_Deadline")]
        public System.DateTimeOffset? Entry_Deadline { get; set; }

        /// <summary>
        /// The main website for this competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Website")]
        public string Website { get; set; }

        /// <summary>
        /// The results website for this competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Results_Website")]
        public string Results_Website { get; set; }

        /// <summary>
        /// List of competing clubs
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Clubs")]
        public System.Collections.Generic.ICollection<AthonClub> Clubs { get; set; }

        /// <summary>
        /// List of competition events
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Events")]
        public System.Collections.Generic.ICollection<AthonEvent> Events { get; set; }

        /// <summary>
        /// Name (and Version) of the origin system which generated this competition data
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("OriginalSource")]
        public string OriginalSource { get; set; }

        /// <summary>
        /// DateTime when this competition was created
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("CreatedAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// DateTime when this competition was last changed.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChangedAt")]
        public System.DateTimeOffset? ChangedAt { get; set; }

        /// <summary>
        /// Current state of this competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("CompetitionState")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonCompetitionState? CompetitionState { get; set; } = TrackAndFieldResults.Seltec.AthonCompetitionState.Undefined;

        /// <summary>
        /// List of IOC Codes of allowed Nations inside this competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("AllowedNations")]
        public System.Collections.Generic.ICollection<string> AllowedNations { get; set; }

        /// <summary>
        /// List of Club IDs allowed to set entries inside this competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("AllowedClubs")]
        public System.Collections.Generic.ICollection<string> AllowedClubs { get; set; }

        /// <summary>
        /// German Level Code, According to DLV / EventCategoryCode
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_GER_LevelCode")]
        public string _GER_LevelCode { get; set; }

        /// <summary>
        /// Identifier of the Owner of this Competition (National or International Code)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Owner_Code")]
        public string Owner_Code { get; set; }

        /// <summary>
        /// Dutch Competition Type
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_NED_CompetitionType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NedCompetitionType? _NED_CompetitionType { get; set; }

        /// <summary>
        /// Dutch Poule Number for ClubCompetition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_NED_Poule")]
        public string _NED_Poule { get; set; }

        /// <summary>
        /// Playround for ClubCompetition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_NED_Playround")]
        public string _NED_Playround { get; set; }

        /// <summary>
        /// World Athletics ID of Competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_WA_Id")]
        public string _WA_Id { get; set; }

        /// <summary>
        /// Set to false, if this competition is not allowed to participate in bestlists. If omitted, true will be assumpted
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Official")]
        public bool? Official { get; set; } = true;

        /// <summary>
        /// Set to true, if this competition is registered at WorldAthletics as a WRC
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("WorldRankingCompetition")]
        public bool? WorldRankingCompetition { get; set; } = false;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonCompetition FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonCompetition>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonEnvironment
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Indoor")]
        Indoor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Outdoor")]
        Outdoor = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonVenue
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of venue
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string Name { get; set; }

        /// <summary>
        /// Number of sprintlanes for this venue
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Sprintlanes")]
        public int? Sprintlanes { get; set; }

        /// <summary>
        /// Number of roundlanes for this venue
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Roundlanes")]
        public int? Roundlanes { get; set; }

        /// <summary>
        /// Address of this venue
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Address")]
        public AthonAddress Address { get; set; }

        /// <summary>
        /// Inter/National GUID of this venue
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("NationalVenueGuid")]
        public System.Guid? NationalVenueGuid { get; set; }

        /// <summary>
        /// Main contact of this venue (e.g. Janitor)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("MainContact")]
        public AthonPerson MainContact { get; set; }

        /// <summary>
        /// World Athletics ID of Venue
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_WA_Id")]
        public string _WA_Id { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonVenue FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonVenue>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonAddress
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Street including street number
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Street")]
        public string Street { get; set; }

        /// <summary>
        /// ZIP code
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Zip")]
        public string Zip { get; set; }

        /// <summary>
        /// Name of Town
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Town")]
        public string Town { get; set; }

        /// <summary>
        /// 3 Letter IOC/ISO Code for Nation. E.g. GER
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Nation")]
        public string Nation { get; set; }

        /// <summary>
        /// The national region. (In Germany Landesverbände). If possible send the national region Code, otherwise fullname
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Region")]
        public string Region { get; set; }

        /// <summary>
        /// The national area (a sub region). (In Germany Kreise) 
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Area")]
        public string Area { get; set; }

        /// <summary>
        /// The national political district (a sub region). (In Germany Bezirke) 
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("District")]
        public string District { get; set; }

        /// <summary>
        /// Latitude of GPS for this Address
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("GPS_Lat")]
        public decimal? GPS_Lat { get; set; }

        /// <summary>
        /// Longitude of GPS for this Address
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("GPS_Lon")]
        public decimal? GPS_Lon { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonAddress FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonAddress>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonPerson
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Firstname of Person
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Firstname")]
        public string Firstname { get; set; }

        /// <summary>
        /// Firstname of Person
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Lastname")]
        public string Lastname { get; set; }

        /// <summary>
        /// Email Address of Person
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EMail")]
        public string EMail { get; set; }

        /// <summary>
        /// Name of Organization of Person
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("OrganisationName")]
        public string OrganisationName { get; set; }

        /// <summary>
        /// ID of Organization of Person from Netherlands
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_NED_OrganisationID")]
        public string _NED_OrganisationID { get; set; }

        /// <summary>
        /// ID of Organization of Person from Netherlands
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_GER_OrganisationID")]
        public string _GER_OrganisationID { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonPerson FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonPerson>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonReport
    {

        /// <summary>
        /// Name and serial of fotofinish device
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Fotofinish_Device")]
        public string Fotofinish_Device { get; set; }

        /// <summary>
        /// Name and serial of scale
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Scale_Device")]
        public string Scale_Device { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonReport FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonReport>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonClub
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of Club (Name inside competition)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 2)]
        public string Name { get; set; }

        /// <summary>
        /// Secondary Name (Official or local name)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("SecondaryName")]
        public string SecondaryName { get; set; }

        /// <summary>
        /// Abbrevation (Short Name) of Club
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Abbrevation")]
        public string Abbrevation { get; set; }

        /// <summary>
        /// 3 Letter ISO/IOC Code for Nation. E.g. GER
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Nation")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string Nation { get; set; }

        /// <summary>
        /// Type of Club
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonClubType Type { get; set; }

        /// <summary>
        /// German string ID of Club. Can be same as GUID, but for legacy reasons this can also be the old Club Code
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_GER_Id")]
        public string _GER_Id { get; set; } = "";

        /// <summary>
        /// German Region of Club (e.g. BA = Baden)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_GER_Region")]
        public string _GER_Region { get; set; } = "";

        /// <summary>
        /// German Area of Club
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_GER_Area")]
        public string _GER_Area { get; set; } = "";

        /// <summary>
        /// German District of Club
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_GER_District")]
        public string _GER_District { get; set; } = "";

        /// <summary>
        /// Netherlands string ID of Club.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_NED_Id")]
        public string _NED_Id { get; set; } = "";

        /// <summary>
        /// German GUID of Club.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_GER_Guid")]
        public System.Guid? _GER_Guid { get; set; }

        /// <summary>
        /// Main contact of this club (e.g. Administrator)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("MainContact")]
        public AthonPerson MainContact { get; set; }

        /// <summary>
        /// Administrative address of this club
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Address")]
        public AthonAddress Address { get; set; }

        /// <summary>
        /// Percentage of Discount this club has to pay for entries. E.g: 20 = 20% less for every entry
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Entry_DiscountPercentage")]
        public int? Entry_DiscountPercentage { get; set; }

        /// <summary>
        /// List of Competitors/Teams/Relays that start for this Club
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Competitors")]
        public System.Collections.Generic.ICollection<AthonCompetitor> Competitors { get; set; }

        /// <summary>
        /// Seltec Object Identifier, globally unique
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_Seltec_Guid")]
        public System.Guid? _Seltec_Guid { get; set; }

        /// <summary>
        /// Luxembuorg string ID of Club
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_LUX_Id")]
        public string _LUX_Id { get; set; } = "";

        /// <summary>
        /// Swiss string ID of Club
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_SUI_Id")]
        public string _SUI_Id { get; set; } = "";

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonClub FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonClub>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonClubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Club")]
        Club = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RelayAlliance")]
        RelayAlliance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ClubAlliance")]
        ClubAlliance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"City")]
        City = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Nation")]
        Nation = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonCompetitor
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Type of competing entity
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonCompetitorType Type { get; set; } = TrackAndFieldResults.Seltec.AthonCompetitorType.Single;

        /// <summary>
        /// Firstname of competitor if normal (single) competitor
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Firstname")]
        public string Firstname { get; set; }

        /// <summary>
        /// Prefix of the Name, can be a legal title (E.g. Dr.)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Prefix")]
        public string Prefix { get; set; }

        /// <summary>
        /// Infix of the name (E.g. van)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Infix")]
        public string Infix { get; set; }

        /// <summary>
        /// Postfix or Suffix of the Name, can be a legal title (E.g. MSc)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Postfix")]
        public string Postfix { get; set; }

        /// <summary>
        /// Lastname of competitor or name of Relay or Team
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 2)]
        public string Name { get; set; }

        /// <summary>
        /// Secondary Firstname (Official or local name)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("SecondaryFirstname")]
        public string SecondaryFirstname { get; set; }

        /// <summary>
        /// Secondary Name (Official or local name, or lastname)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("SecondaryName")]
        public string SecondaryName { get; set; }

        /// <summary>
        /// Bib (Startnumber) of competitor
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Bib")]
        public string Bib { get; set; }

        /// <summary>
        /// Transponder Code for competitor
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Transponder")]
        public string Transponder { get; set; }

        /// <summary>
        /// Freetext comment
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Comment")]
        public string Comment { get; set; }

        /// <summary>
        /// EMail Adress
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EMail")]
        public string EMail { get; set; }

        /// <summary>
        /// Swiss Kid ID
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_SUI_KidId")]
        public string _SUI_KidId { get; set; }

        /// <summary>
        /// Para Classification of this Athlete. E.g. T11. If multiple send like T11,F43
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ParaClassification")]
        public string ParaClassification { get; set; }

        /// <summary>
        /// 3 Letter IOC/ISO Code for Nation. E.g. GER
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Nation")]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string Nation { get; set; }

        /// <summary>
        /// Official Code of the Governing Body (E.g. DLV, SWA, OELV)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("GoverningBody")]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 10)]
        public string GoverningBody { get; set; }

        /// <summary>
        /// Year of birth
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("YoB")]
        public int? YoB { get; set; }

        /// <summary>
        /// Month of birth
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("MoB")]
        public int? MoB { get; set; }

        /// <summary>
        /// Day of birth
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("DoB")]
        public int? DoB { get; set; }

        /// <summary>
        /// Gender of competitor. If team or relay is mixed, please use mixed
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonGender Gender { get; set; }

        /// <summary>
        /// German string ID of Athlete. Can be same as GUID, but for legacy reasons this can also be the old Startpassnummer
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_GER_Id")]
        public string _GER_Id { get; set; } = "";

        /// <summary>
        /// Dutch string ID of Athlete
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_NED_Id")]
        public string _NED_Id { get; set; } = "";

        /// <summary>
        /// German GUID of Athlete.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_GER_Guid")]
        public System.Guid? _GER_Guid { get; set; }

        /// <summary>
        /// Tilastopaja ID of Athlete.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_Tila_Id")]
        public string _Tila_Id { get; set; }

        /// <summary>
        /// World Athletics ID of Athlete.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_WA_Id")]
        public string _WA_Id { get; set; }

        /// <summary>
        /// List of SB/PB Values for this Competitor
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("BestPerformances")]
        public System.Collections.Generic.ICollection<AthonCompetitorPerformance> BestPerformances { get; set; }

        /// <summary>
        /// Seltec Object Identifier, globally unique
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_Seltec_Guid")]
        public System.Guid? _Seltec_Guid { get; set; }

        /// <summary>
        /// If set to false, the competitor has no official national license
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("IsLicensed")]
        public bool? IsLicensed { get; set; } = true;

        /// <summary>
        /// Luxembuorg string ID of Athlete
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_LUX_Id")]
        public string _LUX_Id { get; set; } = "";

        /// <summary>
        /// Swiss string ID of Athlete
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_SUI_Id")]
        public string _SUI_Id { get; set; } = "";

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonCompetitor FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonCompetitor>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonCompetitorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Relay")]
        Relay = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Team")]
        Team = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonGender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Male")]
        Male = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Female")]
        Female = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Mixed")]
        Mixed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NonBinary")]
        NonBinary = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonCompetitorPerformance
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Type classifier for this CompetitorPerformance
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonCompetitorPerformanceType Type { get; set; }

        /// <summary>
        /// Name of Competition where the performance has taken place
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("CompetitionName")]
        public string CompetitionName { get; set; }

        /// <summary>
        /// Location of Competition where the performance has taken place
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("CompetitionLocation")]
        public string CompetitionLocation { get; set; }

        /// <summary>
        /// Town of Competition where the performance has taken place
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("CompetitionTown")]
        public string CompetitionTown { get; set; }

        /// <summary>
        /// Nation of Competition where the performance has taken place
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("CompetitionNation")]
        public string CompetitionNation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Environment")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonEnvironment Environment { get; set; }

        /// <summary>
        /// Seltec Shortcode of the Event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EventShortcode")]
        public string EventShortcode { get; set; }

        /// <summary>
        /// DateTime of the performance
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("PerformanceDateTime")]
        public System.DateTimeOffset PerformanceDateTime { get; set; }

        /// <summary>
        /// Year of the Season of the performance (If the Season is not aligned with the calendar year this can differ from the PerformanceDateTime)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("SeasonYear")]
        public int SeasonYear { get; set; }

        /// <summary>
        /// Shortcode of Agegroup for this Performance
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("AgegroupCode")]
        public string AgegroupCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("HeightWeight")]
        public decimal? HeightWeight { get; set; }

        /// <summary>
        /// The performance values. For this field the *performance should be sufficient
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Performance")]
        [System.ComponentModel.DataAnnotations.Required]
        public AthonPerformance Performance { get; set; } = new AthonPerformance();

        /// <summary>
        /// List of Competitors that participated in this performance
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("RelayMembers")]
        public System.Collections.Generic.ICollection<AthonRelayMember> RelayMembers { get; set; }

        /// <summary>
        /// Rank
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Rank")]
        public int? Rank { get; set; }

        /// <summary>
        /// World Athletics Score Points, if available
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("WorldAthletics_Score")]
        public decimal? WorldAthletics_Score { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonCompetitorPerformance FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonCompetitorPerformance>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonCompetitorPerformanceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Seasonbest")]
        Seasonbest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Personalbest")]
        Personalbest = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EntryValue")]
        EntryValue = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Limit")]
        Limit = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonPerformance
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Value of this timed performance in ISO TimeSpan Format: hh:mm:ss.ffff. For endurance runs, this is brutto-time
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("TimePerformance")]
        public System.TimeSpan? TimePerformance { get; set; }

        /// <summary>
        /// Value of this performance in meters (height or distance). Use NULL or omit if no performance (x or -).
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("DistancePerformance")]
        public decimal? DistancePerformance { get; set; }

        /// <summary>
        /// Value of this performance in points
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("PointsPerformance")]
        public decimal? PointsPerformance { get; set; }

        /// <summary>
        /// Value of this performance, preformatted for output.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("FormattedPerformance")]
        public string FormattedPerformance { get; set; }

        /// <summary>
        /// Wind for this performance. Use 0.0 if no wind, but measured. Use NULL if not measured or not applicable
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Wind")]
        public decimal? Wind { get; set; }

        /// <summary>
        /// If this performance was captured by handtime-device, set to true. If omitted, will be treated as false
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Handtime")]
        public bool? Handtime { get; set; } = false;

        /// <summary>
        /// Netto Value of this timed performance in ISO TimeSpan Format: hh:mm:ss.ffff
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("NettoTimePerformance")]
        public System.TimeSpan? NettoTimePerformance { get; set; }

        /// <summary>
        /// The detail on this result. In case of vertical jump it could be like XXO. For throws or horizontal jumps send x or - if Value is null. Can consist of X,x,O,o,-,r
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Detail")]
        public string Detail { get; set; }

        /// <summary>
        /// Number of this attempt. Begin with 1
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Attempt")]
        public int? Attempt { get; set; }

        /// <summary>
        /// Indication if this attempt was the best for the competitor. This is normally the highest result for this heat or round
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("IsBest")]
        public bool? IsBest { get; set; } = false;

        /// <summary>
        /// Indication if this attempt was the one who is in charge for the rank of the competitor. This is normally the final result for this heat or round
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("IsRanking")]
        public bool? IsRanking { get; set; } = false;

        /// <summary>
        /// The reaction time from the SIS. (E.g. 0.123)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Reaction")]
        public decimal? Reaction { get; set; }

        /// <summary>
        /// Date and Time when this performance was captured
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("PerformanceDateTime")]
        public System.DateTimeOffset? PerformanceDateTime { get; set; }

        /// <summary>
        /// Seltec Object Identifier, globally unique
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_Seltec_Guid")]
        public System.Guid? _Seltec_Guid { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonPerformance FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonPerformance>(data, options);

        }
    }

    /// <summary>
    /// A simpler way to transmit Relay or Team Members, if the ID Linking is not available or desired. A object descendant from AthonCompetitor
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonRelayMember : AthonCompetitor
    {

        /// <summary>
        /// Position inside Relay or Team
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Order")]
        public int? Order { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonRelayMember FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonRelayMember>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonEvent
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Environment where this event takes place
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Environment")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonEnvironment? Environment { get; set; }

        /// <summary>
        /// Shortcode of Event, according to the SELTEC International Shortcodes for Track And Field Events Table
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Shortcode")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Shortcode { get; set; }

        /// <summary>
        /// Freetext name of Event, in local language
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Longname")]
        public string Longname { get; set; }

        /// <summary>
        /// Set to false, if this event is not allowed to participate in bestlists. If omitted, true will be assumpted
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Official")]
        public bool? Official { get; set; } = true;

        /// <summary>
        /// The pointssystem in use to calculate this event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Pointssystem")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonPointssystem? Pointssystem { get; set; }

        /// <summary>
        /// Length of course in meters; If length is a duration use Duration instead
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Custom_CourseLength")]
        public decimal? Custom_CourseLength { get; set; }

        /// <summary>
        /// Number of attempts every competitor has
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Custom_Attempts")]
        public int? Custom_Attempts { get; set; }

        /// <summary>
        /// For Relay Events: Number of allowed members, For Team Events: How many members per Team are allowed per discipline
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Custom_Members")]
        public int? Custom_Members { get; set; }

        /// <summary>
        /// Indicate if wind should be measured for this event. If false -&gt; measurement is optional, if true -&gt; measurement is required
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Custom_Wind")]
        public bool? Custom_Wind { get; set; }

        /// <summary>
        /// List of agegroups that will compete in this event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Agegroups")]
        public System.Collections.Generic.ICollection<AthonAgegroup> Agegroups { get; set; }

        /// <summary>
        /// List of entries/w results inside this event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Entries")]
        public System.Collections.Generic.ICollection<AthonEntry> Entries { get; set; }

        /// <summary>
        /// List of child events (events sending points). If Children are used, this event is mostly a multi or team event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Children")]
        public System.Collections.Generic.ICollection<AthonSubEvent> Children { get; set; }

        /// <summary>
        /// List of rounds inside this event. This is only needed for full structural data support (e.g. before entries exist). For results only, can be omitted
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Rounds")]
        public System.Collections.Generic.ICollection<AthonRound> Rounds { get; set; }

        /// <summary>
        /// Seltec Object Identifier, globally unique
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_Seltec_Guid")]
        public System.Guid? _Seltec_Guid { get; set; }

        /// <summary>
        /// Code according to the Olympic Data Format
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ODF_Code")]
        public string ODF_Code { get; set; }

        /// <summary>
        /// For Team Events: How many athletes are counted
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EvaluatedCompetitors")]
        public int? EvaluatedCompetitors { get; set; }

        /// <summary>
        /// For Team Events: How many relays are counted
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EvaluatedRelays")]
        public int? EvaluatedRelays { get; set; }

        /// <summary>
        /// For Team Events: How many starts an athlete is allowed
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("MaximumStarts")]
        public int? MaximumStarts { get; set; }

        /// <summary>
        /// If multiple attempts should be counted
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Counted_Attempts")]
        public int? Counted_Attempts { get; set; }

        /// <summary>
        /// How long this event should take place (E.g. 1 hour run)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Duration")]
        public System.TimeSpan? Duration { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonEvent FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonEvent>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonPointssystem
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IAAF_Points")]
        IAAF_Points = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GER_Points")]
        GER_Points = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUI_Table_2010")]
        SUI_Table_2010 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AUT_Points")]
        AUT_Points = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FLA_Points")]
        FLA_Points = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SWE_Points")]
        SWE_Points = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"IAAF_Table_2011")]
        IAAF_Table_2011 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PerformanceAddition")]
        PerformanceAddition = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Average")]
        Average = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Cup")]
        Cup = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Ranking_Points")]
        Ranking_Points = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DTB_Points")]
        DTB_Points = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Para_Raza")]
        Para_Raza = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Para_Raza_Youth")]
        Para_Raza_Youth = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Para_Germany")]
        Para_Germany = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"NED_Points")]
        NED_Points = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"NED_Points_Juniors")]
        NED_Points_Juniors = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"NED_Points_Kids")]
        NED_Points_Kids = 18,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonAgegroup
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Gender of this agegroup. If not determined, use mixed
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Gender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonGender Gender { get; set; }

        /// <summary>
        /// National shortcode
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Shortcode")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Shortcode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Longname")]
        public string Longname { get; set; }

        /// <summary>
        /// Minimum age this agegroup will allow competitors
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("FromAge")]
        public int FromAge { get; set; }

        /// <summary>
        /// Maximum age this agegroup will allow competitors
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ToAge")]
        public int ToAge { get; set; }

        /// <summary>
        /// Height of Hurdles in Centimeters (cm) for this agegroup inside this event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Height")]
        public int? Height { get; set; }

        /// <summary>
        /// Weight of throwing equipment in grams (g) for this agegroup inside this event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Weight")]
        public int? Weight { get; set; }

        /// <summary>
        /// Distance between Hurdles in Centimeters (cm) for this agegroup inside this event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Distance")]
        public int? Distance { get; set; }

        /// <summary>
        /// Parasports Classification including T/F Prefix. E.g. T11 for Visual Impairment
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ParaClassification")]
        public string ParaClassification { get; set; }

        /// <summary>
        /// Entry Fee for one entry in this agegroup and event in full cents (e.g. 7,50€ would be 750)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryFee")]
        public int? EntryFee { get; set; }

        /// <summary>
        /// Entry Fee, for Online Payment, for one entry in this agegroup and event in full cents (e.g. 7,50€ would be 750)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryFee_Online")]
        public int? EntryFee_Online { get; set; }

        /// <summary>
        /// Entry Fee, for Late Payment, for one entry in this agegroup and event in full cents (e.g. 7,50€ would be 750)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryFee_Increased")]
        public int? EntryFee_Increased { get; set; }

        /// <summary>
        /// Seltec Object Identifier, globally unique
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_Seltec_Guid")]
        public System.Guid? _Seltec_Guid { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonAgegroup FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonAgegroup>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonEntry
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// ID reference to competitor
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("CompetitorId")]
        public string CompetitorId { get; set; }

        /// <summary>
        /// ID reference to club. Only needed if no competitor present (mostly for calculated results like implicit teams, run/endurance teams). Relays or Pre-Set teams MUST be created with a competitor
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ClubId")]
        public string ClubId { get; set; }

        /// <summary>
        /// ID reference to agegroup (must be part of this event)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("AgegroupId")]
        public string AgegroupId { get; set; }

        /// <summary>
        /// If timeslots are registered in the corresponding event/round, this ID is a reference to the timeslot for entry. The timeslot must be part of this event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("TimeslotId")]
        public string TimeslotId { get; set; }

        /// <summary>
        /// Rank inside the round, disregarding agegroups and heats
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("RoundRank")]
        public int? RoundRank { get; set; } = 0;

        /// <summary>
        /// Rank inside the heat, disregarding agegroup
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("HeatRank")]
        public int? HeatRank { get; set; } = 0;

        /// <summary>
        /// Rank inside the agegroup of the round, disregarding heat
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("AgegroupRank")]
        public int? AgegroupRank { get; set; } = 0;

        /// <summary>
        /// Type of round. If omitted will be treated as entry before start of competition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("RoundType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonRoundType? RoundType { get; set; }

        /// <summary>
        /// Name or number of heat. If omitted but RoundType is present: competitor should be DNS/CAN
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Heat")]
        public string Heat { get; set; }

        /// <summary>
        /// Code of the Unit (Heat) according to the Olympic Data Format
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ODF_UnitCode")]
        public string ODF_UnitCode { get; set; }

        /// <summary>
        /// Code of the Phase (Round) according to the Olympic Data Format
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ODF_PhaseCode")]
        public string ODF_PhaseCode { get; set; }

        /// <summary>
        /// Date and Time when this heat was started
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("HeatDateTime")]
        public System.DateTimeOffset? HeatDateTime { get; set; }

        /// <summary>
        /// Date and Time when this round was started
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("RoundDateTime")]
        public System.DateTimeOffset? RoundDateTime { get; set; }

        /// <summary>
        /// If set to true, the competitor will not receive any rank, but should be still visible on lists
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("WithoutEvaluation")]
        public bool? WithoutEvaluation { get; set; } = false;

        /// <summary>
        /// Freetext comment regarding this entry or the result
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Comment")]
        public string Comment { get; set; }

        /// <summary>
        /// State of entry. If omitted a non-IRM will be calculated based on round and heat information
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("State")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonEntryState? State { get; set; }

        /// <summary>
        /// Set the DateTime when a yellow card was shown to this competitor. If null no yellow card was shown
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("YellowCard")]
        public System.DateTimeOffset? YellowCard { get; set; }

        /// <summary>
        /// Set the DateTime when a red card was shown to this competitor. If null no red card was shown
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("RedCard")]
        public System.DateTimeOffset? RedCard { get; set; }

        /// <summary>
        /// If entry for run event, the qualification/entry time performance. (e.g. from previous event or seasonbest)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryValue_Time")]
        public System.TimeSpan? EntryValue_Time { get; set; }

        /// <summary>
        /// If entry for technical event, the qualification/entry throwing/jumping distance/height performance. (e.g. from previous event or seasonbest)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryValue_Distance")]
        public decimal? EntryValue_Distance { get; set; }

        /// <summary>
        /// If entry for combined event, the qualification/entry points performance. (e.g. from previous event or seasonbest)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryValue_Points")]
        public decimal? EntryValue_Points { get; set; }

        /// <summary>
        /// The Date and Time when the qualification/entry value was captured. If time is unknown, time part can be set to 0
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryValue_DateTime")]
        public System.DateTimeOffset? EntryValue_DateTime { get; set; }

        /// <summary>
        /// Environment where the qualification/entry value was captured
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryValue_Environment")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonEnvironment? EntryValue_Environment { get; set; }

        /// <summary>
        /// If set to true, the EntryValue_Time was handtimed
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryValue_Handtime")]
        public bool? EntryValue_Handtime { get; set; } = false;

        /// <summary>
        /// Location where the EntryValue was done
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryValue_Location")]
        public string EntryValue_Location { get; set; }

        /// <summary>
        /// Remark for the EntryValue
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryValue_Remark")]
        public string EntryValue_Remark { get; set; }

        /// <summary>
        /// If set to true, this entry was already payed (in advance)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("EntryFee_Payed")]
        public bool? EntryFee_Payed { get; set; } = false;

        /// <summary>
        /// If entry for run event, the seasonbest time performance
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("SeasonBest_Time")]
        public System.TimeSpan? SeasonBest_Time { get; set; }

        /// <summary>
        /// If entry for technical event, the seasonbest throwing/jumping distance/height performance
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("SeasonBest_Distance")]
        public decimal? SeasonBest_Distance { get; set; }

        /// <summary>
        /// If entry for combined event, the seasonbest points performance
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("SeasonBest_Points")]
        public decimal? SeasonBest_Points { get; set; }

        /// <summary>
        /// If entry for run event, the personalbest time performance
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("PersonalBest_Time")]
        public System.TimeSpan? PersonalBest_Time { get; set; }

        /// <summary>
        /// If entry for technical event, the personalbest throwing/jumping distance/height performance
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("PersonalBest_Distance")]
        public decimal? PersonalBest_Distance { get; set; }

        /// <summary>
        /// If entry for combined event, the personalbest points performance
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("PersonalBest_Points")]
        public decimal? PersonalBest_Points { get; set; }

        /// <summary>
        /// Name or number of squad ('Riege')
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Squad")]
        public string Squad { get; set; }

        /// <summary>
        /// Qualification information
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Qualification")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonQualification? Qualification { get; set; } = TrackAndFieldResults.Seltec.AthonQualification.None;

        /// <summary>
        /// If set to true, this entry was deleted and should not show up in any system
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Deleted")]
        public bool? Deleted { get; set; } = false;

        /// <summary>
        /// Subnumber for entry inside this event and club. Use in combination with ClubId.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ClubOrder")]
        public int? ClubOrder { get; set; } = 0;

        /// <summary>
        /// List of attempts or single performance. Can be omitted of this is only an entry before event start
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Attempts")]
        public System.Collections.Generic.ICollection<AthonPerformance> Attempts { get; set; }

        /// <summary>
        /// If this Entry and his attempts was created based on other entries or competitors, register them as SubPerformances. E.g. Relay-Members, Teamresults, Combined-Event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("SubPerformances")]
        public System.Collections.Generic.ICollection<AthonSubPerformance> SubPerformances { get; set; }

        /// <summary>
        /// Lane Number or Number of original Starting order in technical event. If lane is double set use 1/1 and 1/2 for lane 1 positions
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Lane")]
        public string Lane { get; set; }

        /// <summary>
        /// Extra Info for TripleJump Board Distance in Meters, or Rotation for Hammer (1=left, 2=right). Zero or NULL for undecided
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ExecutionInfo")]
        public int? ExecutionInfo { get; set; } = 0;

        /// <summary>
        /// Give a Bye. Null or Zero = QualificationRound, Other numbers indicate the direct round this Entry will be placed
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Wildcard")]
        public int? Wildcard { get; set; } = 0;

        /// <summary>
        /// Seltec Object Identifier, globally unique
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_Seltec_Guid")]
        public System.Guid? _Seltec_Guid { get; set; }

        /// <summary>
        /// Status of Waitinglist. If not used set to None, Null or Accepted
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("WaitinglistStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonEntryWaitinglistStatus? WaitinglistStatus { get; set; } = TrackAndFieldResults.Seltec.AthonEntryWaitinglistStatus.None;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonEntry FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonEntry>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonRoundType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tech_PreEndRound")]
        Tech_PreEndRound = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Tech_Qualification")]
        Tech_Qualification = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Run_Qualification")]
        Run_Qualification = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Run_TimedHeats")]
        Run_TimedHeats = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Run_PreliminaryHeats")]
        Run_PreliminaryHeats = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Run_IntermediateHeats")]
        Run_IntermediateHeats = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Run_ABFinal")]
        Run_ABFinal = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Run_Final")]
        Run_Final = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Tech_Final")]
        Tech_Final = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Run_SemiFinal")]
        Run_SemiFinal = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonEntryState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Set")]
        Set = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Finished")]
        Finished = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Dnf")]
        Dnf = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Can")]
        Can = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Dns")]
        Dns = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Dsq")]
        Dsq = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonQualification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"QRight")]
        QRight = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"QSmall")]
        QSmall = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"QJury")]
        QJury = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"QReferee")]
        QReferee = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"QLot")]
        QLot = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"QMoveUp")]
        QMoveUp = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"QWildcard")]
        QWildcard = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Passed")]
        Passed = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PLot")]
        PLot = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonSubPerformance
    {

        /// <summary>
        /// ID of Entry who participates in the parent entry with some performance. E.g. Team or Combined
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChildEntryId")]
        public string ChildEntryId { get; set; }

        /// <summary>
        /// ID of Competitor who participates in the parent entry, but has no explcit entry. E.g. Relaymembers. If ChildEntryId is present, this is normally not needed
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChildCompetitorId")]
        public string ChildCompetitorId { get; set; }

        /// <summary>
        /// Order of appearance of this SubPerformance. E.g. Order of Relaymembers inside a relay. Start with 1
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Order")]
        public int? Order { get; set; }

        /// <summary>
        /// Value in ISO TimeSpan Format: hh:mm:ss.ffff. For endurance runs, this is brutto-time. This is supplied to the parent entry. E.g. Endurance-Team
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("TimePerformance")]
        public System.TimeSpan? TimePerformance { get; set; }

        /// <summary>
        /// Netto-Value in ISO TimeSpan Format: hh:mm:ss.ffff.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("NettoTimePerformance")]
        public System.TimeSpan? NettoTimePerformance { get; set; }

        /// <summary>
        /// Value in points that are supplied to the parent entry. E.g. Combined or Team
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("PointsPerformance")]
        public decimal? PointsPerformance { get; set; }

        /// <summary>
        /// Indicated if this subperformance finally participated in the entry. (E.g. Scratchresults will get 'false')
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("IsParticipating")]
        public bool? IsParticipating { get; set; } = true;

        /// <summary>
        /// Value of this performance, preformatted for output.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("FormattedPerformance")]
        public string FormattedPerformance { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonSubPerformance FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonSubPerformance>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonEntryWaitinglistStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Waitinglist")]
        Waitinglist = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Declined")]
        Declined = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonSubEvent
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// ID reference to child Event
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ChildEventId")]
        public string ChildEventId { get; set; }

        /// <summary>
        /// Order of appearance of this SubEvent. Start with 1
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Order")]
        public int? Order { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonSubEvent FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonSubEvent>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonRound
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Type of this round
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("RoundType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AthonRoundType RoundType { get; set; }

        /// <summary>
        /// Start of this round (Mostly correlates later with start of the first heat/race/group of this round)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Start")]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// Amount of Q (Qualification by right or place) this round will send to the next round
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("QualifiedByRight")]
        public int? QualifiedByRight { get; set; }

        /// <summary>
        /// Amount of q (Qualification by time or distance) this round will send to the next round
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("QualifiedByTime")]
        public int? QualifiedByTime { get; set; }

        /// <summary>
        /// List of timeslots for entries to start in. This is mostly only used in the first round, and should not be used together with squads.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Timeslots")]
        public System.Collections.Generic.ICollection<AthonTimeslot> Timeslots { get; set; }

        /// <summary>
        /// Seltec Object Identifier, globally unique
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_Seltec_Guid")]
        public System.Guid? _Seltec_Guid { get; set; }

        /// <summary>
        /// Code according to the Olympic Data Format
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ODF_Code")]
        public string ODF_Code { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonRound FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonRound>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AthonTimeslot
    {

        /// <summary>
        /// ID inside Document or Database
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        /// <summary>
        /// Freetext name of this timeslot, in local language. If omitted the system should use the time of this slot
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string Name { get; set; }

        /// <summary>
        /// DateTime of this Slot.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("Start")]
        public System.DateTimeOffset? Start { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AthonTimeslot FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AthonTimeslot>(data, options);

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AthonCompetitionState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckPending")]
        CheckPending = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Declined")]
        Declined = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Canceled")]
        Canceled = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NedCompetitionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NormalCompetition")]
        NormalCompetition = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ClubCompetition")]
        ClubCompetition = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AthleticsChamps")]
        AthleticsChamps = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765