/*
 * SPDX - FileCopyrightText: Copyright © 2025 Christian Günther <cg-ite@gmx.de>
 * SPDX - License - Identifier: GPL - 3.0 - or - later
 */



using System.Text;

namespace TrackAndFieldResults.Seltec
{
    /// <summary>
    /// JsonClient for getting the results of the German Athletics Federation (DLV).
    /// You need an api-key from them to get access to the result
    /// database, see https://github.com/Deutscher-Leichtathletikverband/Interfaces?tab=readme-ov-file
    /// The client is generated by NSwagStudio with this schema
    /// https://ergebnisse.leichtathletik.de/swagger/v1/swagger.json
    /// </summary>
    public partial class SeltecAthonClient : SeltecAthonClientGenerated
    {
        public SeltecAthonClient(HttpClient httpClient) : base(httpClient)
        {
        }

        /// <summary>
        /// Raw text of the server response for caching or writing
        /// to a file
        /// </summary>
        public string ResponseText { get; set; }
        /// <summary>
        /// Writes the contents of the response text to a file
        /// </summary>
        /// <param name="fileName"></param>
        public void SaveResponseText(string fileName)
        {
            using (var fs = new StreamWriter(fileName,
                    false, Encoding.UTF8))
            {
                fs.Write(ResponseText);
            }
        }

        //public async Task<CompetitionsRoot> CompetitionsAsync(string fullname)
        //{
            
        //}

        /// <summary>
        /// This overrides the generated method to set the response text
        /// to the ResponseText property
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="response"></param>
        /// <param name="headers"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        /// <exception cref="ApiException"></exception>
        protected override async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                ResponseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(ResponseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, ResponseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, ResponseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
#if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
#else
            return content.ReadAsStringAsync();
#endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
#if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
#else
            return content.ReadAsStreamAsync();
#endif
        }
    }
}
